{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "40edc16c_e5944db5",
        "filename": "include/sysrepo-cpp/Session.hpp",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2025-05-29T09:05:53Z",
      "side": 1,
      "message": "I dont follow why these using declarations are needed. \nAd `lock_type`: It is used only inside `mt_lock`, can\u0027t we inline the type there?\nAd `mutex_type`, I think you are declaring the using mutex_type only because you don\u0027t want type std::mutex twice (in two ctors). You can use decltype there, can\u0027t you?",
      "range": {
        "startLine": 196,
        "startChar": 0,
        "endLine": 198,
        "endChar": 2
      },
      "revId": "5216961b47be434b87666b66f8832c2c3fe3c46e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a590ccab_3a029fb7",
        "filename": "include/sysrepo-cpp/Session.hpp",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-29T09:16:45Z",
      "side": 1,
      "message": "The `mutex_type` is used three times already (in the member variable definition, in the `lock_guard` type specialization, and in the `mt_lock`\u0027s signature). In my opinion an explicit `using` declaration is quite a bit nicer than `decltype(m_mtx)::element_type`, so I won\u0027t be changing this.\n\nRe the `lock_type`, the reason why I wrote it that way is that out-of-class use of the locking function in the lambdas which are used as the destructor in Session::Session. In some previous version of this change (unpushed, I guess), I had to reimplement the same locking because I do not have access to a Session instance by the time its members are being destroyed. In the end I solved this by using a static method, so you\u0027re right, this is not necessary, but I think that it really doesn\u0027t hurt that much.",
      "parentUuid": "40edc16c_e5944db5",
      "range": {
        "startLine": 196,
        "startChar": 0,
        "endLine": 198,
        "endChar": 2
      },
      "revId": "5216961b47be434b87666b66f8832c2c3fe3c46e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a1cc64d_56bb10fe",
        "filename": "include/sysrepo-cpp/Session.hpp",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-29T09:18:26Z",
      "side": 1,
      "message": "(Also, I thought that it might be useful to \"pass\" the lock between methods, and for that, trying to determine a function\u0027s call result is something that I really like to avoid :). This turned out to not be needed, but I think it\u0027s still OK to have this as a part of the private API. Are you OK with this?)",
      "parentUuid": "a590ccab_3a029fb7",
      "range": {
        "startLine": 196,
        "startChar": 0,
        "endLine": 198,
        "endChar": 2
      },
      "revId": "5216961b47be434b87666b66f8832c2c3fe3c46e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16225771_c3ad2524",
        "filename": "include/sysrepo-cpp/Session.hpp",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2025-05-29T09:20:22Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "8a1cc64d_56bb10fe",
      "range": {
        "startLine": 196,
        "startChar": 0,
        "endLine": 198,
        "endChar": 2
      },
      "revId": "5216961b47be434b87666b66f8832c2c3fe3c46e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27d67ddd_4c023285",
        "filename": "src/Session.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2025-05-29T09:05:53Z",
      "side": 1,
      "message": "I think this change can be done as a standalone patch, but I am not feeling very strict today, so I will not enforce this :-)",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 109,
        "endChar": 2
      },
      "revId": "5216961b47be434b87666b66f8832c2c3fe3c46e",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ],
  "submitRequirementResults": []
}